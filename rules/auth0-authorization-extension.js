/*
*  This rule been automatically generated by auth0-authz-extension
*  Updated by kerin.cosford@digital.justice.gov.uk, 2017-01-14T22:47:58.651Z
 */
function (user, context, callback) {
  // If connection is not passwordless skip this rule
  var connection = user.identities[0].connection;
  if (connection !== 'email') {
    return callback(null, user, context);
  }

  var _ = require('lodash');
  var EXTENSION_URL = configuration.AUTH_EXTENSION_URL;
  var API_KEY = configuration.AUTH_EXTENSION_API_KEY;

  getPolicy(user, context, function(err, res, data) {
    if (err) {
      console.log('Error from Authorization Extension:', err);
      return callback(new UnauthorizedError('Authorization Extension: ' + err.message));
    }

    if (res.statusCode !== 200) {
      console.log('Error from Authorization Extension:', res.body || res.statusCode);
      return callback(
        new UnauthorizedError('Authorization Extension: ' + ((res.body && (res.body.message || res.body) || res.statusCode)))
      );
    }

    // Add permissions (from Authorization Extension) to the user object.
    user.permissions = data.permissions;

    // Check if user has permission to view this shiny app
    if (!canViewShinyApp(user)) {
      return callback(new UnauthorizedError('Access denied.'));
    }

    return callback(null, user, context);
  });

  function canViewShinyApp(user) {
    // NOTE: 'view:app' is the name of the permission but the
    //       authorization plugin only expose the permissions for the current
    //       client the user is trying to log into.
    return _.includes(user.permissions, 'view:app');
  }

  // Get the policy for the user.
  function getPolicy(user, context, cb) {
    request.post({
      url: EXTENSION_URL + "/api/users/" + user.user_id + "/policy/" + context.clientID,
      headers: {
        "x-api-key": API_KEY
      },
      json: {
        connectionName: 'email',
        groups: user.groups
      },
      timeout: 5000
    }, cb);
  }
}
